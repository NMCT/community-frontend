# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

"Information about the offset pagination."
type CollectionSegmentInfo {
    "Indicates whether more items exist following the set defined by the clients arguments."
    hasNextPage: Boolean!
    "Indicates whether more items exist prior the set defined by the clients arguments."
    hasPreviousPage: Boolean!
}

type Event {
    attendees: [ShortUser!]
    createdOn: DateTime
    description: String!
    endDate: DateTime!
    id: ObjectId
    interested: [ShortUser!]
    location: String!
    maxAttendees: Int!
    openToGuests: Boolean!
    organizer: ShortUser!
    startDate: DateTime!
    title: String!
    type: EventType!
    updatedOn: DateTime
}

"A segment of a collection."
type EventsCollectionSegment {
    "A flattened list of the items."
    items: [Event!]
    "Information to aid in pagination."
    pageInfo: CollectionSegmentInfo!
}

type Mutation {
    attendEvent(eventId: String!): Event!
    changeDisplayName(displayName: String!): User!
    createEvent(input: EventInput!): Event!
    deleteUser: Boolean!
    firstLogin(idToken: String!): User!
    interestedEvent(eventId: String!): Event!
    readNotification(id: String!): Notification!
    test: Boolean!
    unattendEvent(eventId: String!): Event!
    uninterestedEvent(eventId: String!): Event!
    updateEvent(update: EventUpdateInput!): Event!
    updateSocials(socials: SocialsInput!): User!
}

type Notification {
    createdAt: DateTime!
    eventId: ObjectId
    id: ObjectId
    isRead: Boolean!
    link: String
    message: String
    readAt: DateTime
    title: String
    userId: String
}

"A segment of a collection."
type NotificationsCollectionSegment {
    "A flattened list of the items."
    items: [Notification!]
    "Information to aid in pagination."
    pageInfo: CollectionSegmentInfo!
}

type Query {
    event(id: String!): Event
    events(order: [EventSortInput!], skip: Int, take: Int, where: EventFilterInput): EventsCollectionSegment
    notifications(order: [NotificationSortInput!], skip: Int, take: Int, where: NotificationFilterInput): NotificationsCollectionSegment
    user(uid: String!): User
    users(order: [UserSortInput!], where: UserFilterInput): [User!]!
}

type ShortUser {
    email: String
    name: String
    profilePicture: String
    uid: String!
}

type Socials {
    discord: String!
    facebook: URL!
    instagram: URL!
    linkedIn: URL!
}

type Subscription {
    onEventChanged: Notification!
}

type User {
    email: String
    firebaseId: String!
    id: ObjectId
    profilePictureUri: String
    socials: Socials
    type: UserType!
    username: String
}

enum ApplyPolicy {
    AFTER_RESOLVER
    BEFORE_RESOLVER
    VALIDATION
}

enum EventType {
    COMMUNITY
    OFFICIAL
}

enum SortEnumType {
    ASC
    DESC
}

enum UpdateAudience {
    ALL
    ATTENDEES
    INTERESTED
    NONE
}

enum UserType {
    ADMIN
    GUEST
    NONE
    USER
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The ObjectId scalar type represents a 12 byte ObjectId, represented as UTF-8 character sequences."
scalar ObjectId

scalar URL

input BooleanOperationFilterInput {
    eq: Boolean
    neq: Boolean
}

input DateTimeOperationFilterInput {
    eq: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime]
    lt: DateTime
    lte: DateTime
    neq: DateTime
    ngt: DateTime
    ngte: DateTime
    nin: [DateTime]
    nlt: DateTime
    nlte: DateTime
}

input EventFilterInput {
    and: [EventFilterInput!]
    attendees: ListFilterInputTypeOfShortUserFilterInput
    createdOn: DateTimeOperationFilterInput
    description: StringOperationFilterInput
    endDate: DateTimeOperationFilterInput
    id: ObjectIdOperationFilterInput
    interested: ListFilterInputTypeOfShortUserFilterInput
    location: StringOperationFilterInput
    maxAttendees: IntOperationFilterInput
    openToGuests: BooleanOperationFilterInput
    or: [EventFilterInput!]
    organizer: ShortUserFilterInput
    startDate: DateTimeOperationFilterInput
    title: StringOperationFilterInput
    type: EventTypeOperationFilterInput
    updatedOn: DateTimeOperationFilterInput
}

input EventInput {
    attendees: [ShortUserInput!]
    createdOn: DateTime
    description: String!
    endDate: DateTime!
    id: ObjectId
    interested: [ShortUserInput!]
    location: String!
    maxAttendees: Int!
    openToGuests: Boolean!
    organizer: ShortUserInput!
    startDate: DateTime!
    title: String!
    type: EventType!
    updatedOn: DateTime
}

input EventSortInput {
    createdOn: SortEnumType
    description: SortEnumType
    endDate: SortEnumType
    id: SortEnumType
    location: SortEnumType
    maxAttendees: SortEnumType
    openToGuests: SortEnumType
    organizer: ShortUserSortInput
    startDate: SortEnumType
    title: SortEnumType
    type: SortEnumType
    updatedOn: SortEnumType
}

input EventTypeOperationFilterInput {
    eq: EventType
    in: [EventType!]
    neq: EventType
    nin: [EventType!]
}

input EventUpdateInput {
    description: String
    endDate: DateTime
    eventId: ObjectId!
    location: String
    maxAttendees: Int
    openToGuests: Boolean
    sendUpdate: Boolean!
    startDate: DateTime
    title: String
    updateAudience: UpdateAudience
    updateLink: String
    updateMessage: String
    updateTitle: String
}

input IntOperationFilterInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    neq: Int
    ngt: Int
    ngte: Int
    nin: [Int]
    nlt: Int
    nlte: Int
}

input ListFilterInputTypeOfShortUserFilterInput {
    all: ShortUserFilterInput
    any: Boolean
    none: ShortUserFilterInput
    some: ShortUserFilterInput
}

input NotificationFilterInput {
    and: [NotificationFilterInput!]
    createdAt: DateTimeOperationFilterInput
    eventId: ObjectIdOperationFilterInput
    id: ObjectIdOperationFilterInput
    isRead: BooleanOperationFilterInput
    link: StringOperationFilterInput
    message: StringOperationFilterInput
    or: [NotificationFilterInput!]
    readAt: DateTimeOperationFilterInput
    title: StringOperationFilterInput
    userId: StringOperationFilterInput
}

input NotificationSortInput {
    createdAt: SortEnumType
    eventId: SortEnumType
    id: SortEnumType
    isRead: SortEnumType
    link: SortEnumType
    message: SortEnumType
    readAt: SortEnumType
    title: SortEnumType
    userId: SortEnumType
}

input ObjectIdOperationFilterInput {
    eq: ObjectId
    gt: ObjectId
    gte: ObjectId
    in: [ObjectId]
    lt: ObjectId
    lte: ObjectId
    neq: ObjectId
    ngt: ObjectId
    ngte: ObjectId
    nin: [ObjectId]
    nlt: ObjectId
    nlte: ObjectId
}

input ShortUserFilterInput {
    and: [ShortUserFilterInput!]
    email: StringOperationFilterInput
    name: StringOperationFilterInput
    or: [ShortUserFilterInput!]
    profilePicture: StringOperationFilterInput
    uid: StringOperationFilterInput
}

input ShortUserInput {
    email: String
    name: String
    profilePicture: String
    uid: String!
}

input ShortUserSortInput {
    email: SortEnumType
    name: SortEnumType
    profilePicture: SortEnumType
    uid: SortEnumType
}

input SocialsFilterInput {
    and: [SocialsFilterInput!]
    discord: StringOperationFilterInput
    facebook: UrlOperationFilterInput
    instagram: UrlOperationFilterInput
    linkedIn: UrlOperationFilterInput
    or: [SocialsFilterInput!]
}

input SocialsInput {
    discord: String!
    facebook: URL!
    instagram: URL!
    linkedIn: URL!
}

input SocialsSortInput {
    discord: SortEnumType
    facebook: UriSortInput
    instagram: UriSortInput
    linkedIn: UriSortInput
}

input StringOperationFilterInput {
    and: [StringOperationFilterInput!]
    contains: String
    endsWith: String
    eq: String
    in: [String]
    ncontains: String
    nendsWith: String
    neq: String
    nin: [String]
    nstartsWith: String
    or: [StringOperationFilterInput!]
    startsWith: String
}

input UriSortInput {
    absolutePath: SortEnumType
    absoluteUri: SortEnumType
    authority: SortEnumType
    dnsSafeHost: SortEnumType
    fragment: SortEnumType
    host: SortEnumType
    hostNameType: SortEnumType
    idnHost: SortEnumType
    isAbsoluteUri: SortEnumType
    isDefaultPort: SortEnumType
    isFile: SortEnumType
    isLoopback: SortEnumType
    isUnc: SortEnumType
    localPath: SortEnumType
    originalString: SortEnumType
    pathAndQuery: SortEnumType
    port: SortEnumType
    query: SortEnumType
    scheme: SortEnumType
    userEscaped: SortEnumType
    userInfo: SortEnumType
}

input UrlOperationFilterInput {
    eq: URL
    gt: URL
    gte: URL
    in: [URL]
    lt: URL
    lte: URL
    neq: URL
    ngt: URL
    ngte: URL
    nin: [URL]
    nlt: URL
    nlte: URL
}

input UserFilterInput {
    and: [UserFilterInput!]
    email: StringOperationFilterInput
    firebaseId: StringOperationFilterInput
    id: ObjectIdOperationFilterInput
    or: [UserFilterInput!]
    profilePictureUri: StringOperationFilterInput
    socials: SocialsFilterInput
    type: UserTypeOperationFilterInput
    username: StringOperationFilterInput
}

input UserSortInput {
    email: SortEnumType
    firebaseId: SortEnumType
    id: SortEnumType
    profilePictureUri: SortEnumType
    socials: SocialsSortInput
    type: SortEnumType
    username: SortEnumType
}

input UserTypeOperationFilterInput {
    eq: UserType
    in: [UserType!]
    neq: UserType
    nin: [UserType!]
}
